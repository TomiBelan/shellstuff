#!/bin/bash
# shellcheck disable=SC2016,SC2250

set -e -u -o pipefail
shopt -s nullglob

config_path=${RRPAK_CONF:-${XDG_CONFIG_HOME:-~/.config}/rrpak/rrpak.conf}

# helper variables for use in the config file
declare -i second=1
declare -i minute=$((60*second))
declare -i hour=$((60*minute))
declare -i day=$((24*hour))
# shellcheck disable=SC2034
declare -i week=$((7*day))

declare -i rrpak_permanentenv_remind_after rrpak_local_max_reuse_age rrpak_local_max_shell_life

# default config values
rrpak_permanentenv_path=~/.rrpak
rrpak_permanentenv_backups=
rrpak_permanentenv_packages=()
rrpak_permanentenv_remind_after=$((40*day))
rrpak_local_cache_path=${XDG_CACHE_HOME:-~/.cache}/rrpak
rrpak_local_max_reuse_age=$((15*day))
rrpak_local_max_shell_life=$((20*day))

if [[ -e "$config_path" ]]; then
  # shellcheck source=/dev/null
  source "$config_path"
fi

usage () {
  echo >&2 "Usage:
  rrpak update
  rrpak run [--old|--new] PACKAGE... -- PROGRAM ARGS...
  rrpak local [--old|--new] PACKAGE...
  rrpak clean [--force] [--nonblock]
  rrpak build OUT-DIR PACKAGE...
  rrpak hook"
  exit "$1"
}

wrapcurl () {
  echo >&2 "Downloading ${*: -1}"
  local curlopt=-fL
  [[ -t 2 ]] && curlopt+='#'
  curl "$curlopt" "$@" && true
  case "$?" in
  0) true;;
  23) echo >&2 "Ignoring curl error";;  # Can happen with "grep -m1". See https://stackoverflow.com/a/28879552
  *) false;;
  esac
}

wrapgrep () {
  grep "$@" && true
  (( "$?" < 2 ))  # 0 and 1 are good exit codes
}

put_micromamba_in_misc () {
  mkdir -p misc
  wrapcurl 'https://micro.mamba.pm/api/micromamba/linux-64/latest' | tar -xj --strip-components=1 -C ./misc bin/micromamba
  # The tarball also contains info/ with licenses and build info jsons. Probably not needed.
}

install_micromamba () {
  put_micromamba_in_misc

  # Skip '-s bash'. Micromamba will guess the shell by inspecting its PPID. This should allow ./rc to work with non-bash posix shells (disclaimer: never tested).
  # Work around https://github.com/mamba-org/mamba/issues/1748 and https://github.com/mamba-org/mamba/issues/2163.
  echo "eval \"\$(${PWD@Q}/misc/micromamba shell hook | sed '/COMPREPLY/ s/.MAMBA_EXE/__mamba_exe/; /PATH.*condabin/ s/.*/true/')\"" >> rc

  # rrpak does not set MAMBA_ROOT_PREFIX. The user can set it if they want.
}

install_age () {
  mkdir -p bin
  wrapcurl 'https://dl.filippo.io/age/latest?for=linux/amd64' | tar -xz --strip-components=1 -C ./bin age/age age/age-keygen
  # The tarball also contains age/LICENSE.
}

install_gh () {
  mkdir -p bin
  local ver
  ver=$(wrapcurl -sS https://api.github.com/repos/cli/cli/releases/latest | wrapgrep -o -m 1 '"gh[^"]*linux_amd64.tar.gz"' | tr -d '"')
  if [ "$ver" == "" ]; then
    echo >&2 "Error: Unable to determine gh version"
    exit 1
  fi
  wrapcurl "https://github.com/cli/cli/releases/latest/download/$ver" | tar -xz --strip-components=2 -C ./bin "${ver%.tar.gz}/bin/gh"
  # The tarball also contains gh_*/share/man. Probably not needed.
}

install_lf () {
  mkdir -p bin misc
  wrapcurl 'https://github.com/gokcehan/lf/releases/latest/download/lf-linux-amd64.tar.gz' | tar -xz -C ./misc lf
  echo $'#!/bin/bash\nexec "$(dirname "$0")/../misc/lf" -single "$@"' > bin/lf
  chmod a+x bin/lf
}

install_ripgrep () {
  mkdir -p bin misc ripgreptmp
  local ver
  ver=$(wrapcurl -sS https://api.github.com/repos/BurntSushi/ripgrep/releases/latest | wrapgrep -o -m 1 '"ripgrep[^"]*x86_64-unknown-linux-musl.tar.gz"' | tr -d '"')
  if [ "$ver" == "" ]; then
    echo >&2 "Error: Unable to determine ripgrep version"
    exit 1
  fi
  wrapcurl "https://github.com/BurntSushi/ripgrep/releases/latest/download/$ver" | tar -xz --strip-components=1 -C ./ripgreptmp "${ver%.tar.gz}/rg" "${ver%.tar.gz}/complete/rg.bash"
  mv ripgreptmp/rg bin/
  mv ripgreptmp/complete/rg.bash misc/
  rmdir ripgreptmp/complete
  rmdir ripgreptmp
  echo "source ${PWD@Q}/misc/rg.bash" >> rc
}

install_micro () {
  mkdir -p bin
  local ver
  ver=$(wrapcurl -sS https://api.github.com/repos/zyedidia/micro/releases/latest | wrapgrep -o -m 1 '"micro[^"]*linux64.tar.gz"' | tr -d '"')
  if [ "$ver" == "" ]; then
    echo >&2 "Error: Unable to determine micro version"
    exit 1
  fi
  wrapcurl "https://github.com/zyedidia/micro/releases/latest/download/$ver" | tar -xz --strip-components=1 -C ./bin "${ver%-*.tar.gz}/micro"
  # The tarball also contains LICENSE, LICENSE-THIRD-PARTY, README.md, micro.1, micro.desktop, micro.svg.
}

install_shellcheck () {
  mkdir -p bin
  wrapcurl "https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz" | tar -xJ --strip-components=1 -C ./bin "shellcheck-stable/shellcheck"
  # The tarball also contains LICENSE.txt, README.txt.
}

install_pipx () {
  # TODO: It is almost possible to delete this now and use 'pip.pipx' instead.
  # The only slight difference is how pipx selects the default interpreter
  # when it runs inside a venv.

  # System Python is needed. (On Debian-likes: apt install python3 python3-venv)
  # This installs pipx in a custom path (not ~/.local/{bin,lib}).
  # But the default interpreter used by pipx will still be /usr/bin/python3.
  # This is a huge hack to make that happen. It is probably very unsupported
  # and might not be the best way to do it.
  mkdir -p misc bin

  # The temporary venv is used just to make it work without systemwide pip.
  echo >&2 "Creating temporary venv"
  /usr/bin/python3 -m venv pipx_tmp_pip_env

  # This is what `-m venv --upgrade-deps` would do. See venv/__init__.py.
  echo >&2 "Upgrading pip, setuptools"
  pipx_tmp_pip_env/bin/pip --isolated --no-cache-dir install --upgrade pip setuptools

  # I haven't found official docs on the layout created by `pip install --target`.
  echo >&2 "Installing pipx"
  pipx_tmp_pip_env/bin/pip --isolated --no-cache-dir install --target ./misc/pipxbase pipx

  rm -rf pipx_tmp_pip_env

  # The bins have a shebang from pipx_tmp_pip_env and they don't know where to
  # find libraries. Edit each bin to fix it. Huge hack!
  echo >&2 "Editing bin scripts"
  /usr/bin/python3 -c 'if True:
    import os, sys, pathlib
    for p in pathlib.Path("misc/pipxbase/bin").iterdir():
      with p.open() as f: lines = f.read().split("\n")
      assert lines[0].startswith("#!")
      assert "import sys" in lines
      lines[0] = "#!" + sys.executable
      lines[lines.index("import sys")] += """; import os; sys.path[0] = os.path.join(sys.path[0], "..")"""
      with p.open("w") as f: f.write("\n".join(lines))
  '

  cd bin
  ln -s ../misc/pipxbase/bin/* .
  cd ..
}

normalize_packages () {
  for pkg in "${packages[@]}"; do
    case "$pkg" in
      conda.*) ;;
      pip.*) ;;
      *)
        if [ "$(type -t "install_$pkg" 2>/dev/null || true)" != function ]; then
          echo >&2 "Unknown package '$pkg'"
          exit 1
        fi
        ;;
    esac
  done
  local tmp
  tmp=$(printf '%s\n' "${packages[@]}" | sort -u)
  mapfile -t packages <<< "$tmp"
}

do_build () {
  if [ "${destination:0:1}" != "/" ]; then
    echo >&2 "Internal error: '$destination' should be absolute"
    exit 1
  fi

  for _ in "$destination"/*; do
    echo >&2 "error: '$destination' is not empty"
    exit 1
  done

  mkdir -p "$destination"
  touch "$destination/rc"

  local oldcwd="$PWD"
  cd "$destination"

  condapackages=()
  pippackages=()
  pathdirs=("$destination/bin" "$destination/menv/bin")

  for pkg in "${packages[@]}"; do
    case "$pkg" in
      conda.*) condapackages+=("${pkg#*.}");;
      pip.*) pippackages+=("${pkg#*.}");;
      *) "install_$pkg";;
    esac
  done

  if [ "${#condapackages[@]}" != 0 ]; then
    if ! [[ -e misc/micromamba ]]; then
      put_micromamba_in_misc
    fi

    unset "${!CONDA@}"
    unset "${!MAMBA@}"

    export MAMBA_SHOW_BANNER=false

    # Always use a local package cache directory. Don't share packages between rrpak invocations.
    # Because:
    # 1. Unlike rrpak, micromamba doesn't automatically clean the cache. Old package versions are
    #    kept forever until the user manually runs `micromamba clean ...`.
    #    (Side note: `micromamba clean` may delete up-to-date packages too because it only checks
    #    what packages are used by named envs. See `envs` in libmamba/src/api/clean.cpp.)
    # 2. micromamba uses hardlinks to share files between envs and the cache, but the frequent
    #    updates of atime and ctime (st_nlinks) interfere with my tmp directory cleaning tool.
    export CONDA_PKGS_DIRS="$destination/mpkgs"

    # 'micromamba create' 1. just touches $env/conda-meta/history, 2. writes $env to ~/.conda/environments.txt.
    # We don't want to add this environment to environments.txt because it looks ugly.
    # But there is no option or config setting to disable it.
    # Instead of calling 'micromamba create', let's make it ourselves. Then populate it with 'micromamba install'.
    mkdir menv menv/conda-meta
    touch menv/conda-meta/history

    ./misc/micromamba --no-rc install -y -p ./menv -c conda-forge "${condapackages[@]}"
    # TODO: limited bin in path, with wrappers? probably later (if ever).

    rm -rf mpkgs
  fi

  for pkg in "${pippackages[@]}"; do
    if [ -f "$destination/menv/bin/python3" ]; then
      py="$destination/menv/bin/python3"
    elif [ -f /usr/bin/python3 ]; then
      py=/usr/bin/python3
    else
      echo >&2 "rrpak error: /usr/bin/python3 not found"
      false
    fi

    echo >&2 "Installing $pkg with pip in $destination/venv-$pkg using $py"
    "$py" -m venv --upgrade-deps "venv-$pkg"
    existingbins=("venv-$pkg/bin"/*)
    "venv-$pkg/bin/pip" install "$pkg"

    mkdir "venv-$pkg/filteredbin"
    pathdirs+=("$destination/venv-$pkg/filteredbin")
    for binfile in "venv-$pkg/bin"/*; do
      existed=
      for existingbinfile in "${existingbins[@]}"; do
        [ "$binfile" == "$existingbinfile" ] && existed=y
      done
      [ "$existed" == "" ] && ln -s "../bin/${binfile##*/}" "venv-$pkg/filteredbin"
    done
  done

  # FYI: How 'micromamba activate' works.
  #
  # 'micromamba activate -p $env' would do these changes:
  # - Modify $PS1, prepending '($env) '.
  #   - TODO: Let's modify $PS1 for 'rrpak local' envs, but not the main env from 'rrpak update'.
  # - Modify $PATH, prepending $env/bin.
  #   - This is the only change we're interested in.
  #   - E.g. 'man' also uses $PATH to look up manpages in ../man, man, ../share/man, share/man.
  # - Set CONDA_PREFIX to $env. Effects of CONDA_PREFIX:
  #   - $env is used as the default 'target_prefix' by 'micromamba install', 'micromamba update', etc.
  #   - 'micromamba deactivate' knows what to deactivate.
  #   - 'micromamba activate' knows what activation to undo if non-stacked.
  #   - the environment is labelled as "(active)" in 'micromamba info'
  # - Set CONDA_SHLVL to 1. Effects of CONDA_SHLVL:
  #   - 'micromamba shell hook' won't add $MAMBA_ROOT_PREFIX/condabin to $PATH.
  #   - 'micromamba activate' and 'micromamba deactivate' track the stack of activations.
  # - Set CONDA_DEFAULT_ENV to $env. Effects of CONDA_DEFAULT_ENV:
  #   - Only used to build CONDA_PROMPT_MODIFIER.
  # - Set CONDA_PROMPT_MODIFIER to '($env) '. Effects of CONDA_PROMPT_MODIFIER:
  #   - Only used to update PS1, and undo it in 'micromamba deactivate'.

  for dir in "${pathdirs[@]}"; do
    if [ -e "$dir" ]; then
      printf 'case ":$PATH:" in\n  *:%s:*) ;;\n  *) PATH=%s:$PATH;;\nesac\n' "${dir@Q}" "${dir@Q}" >> rc
    fi
  done

  cd "$oldcwd"
}

(( $# == 0 )) && usage 0

cmd=$1
shift
case "$cmd" in
  hook)
    [ "$#" != 0 ] && usage 1

    self=$(readlink -fv "$0")

    echo 'rrpak () {'
    echo '  if [ "$1" == "local" ]; then'
    echo '    shift'
    echo '    local code'
    echo '    code=$('"${self@Q}"' internal-local "$@") || return $?'
    echo '    eval "$code"'
    echo '  else'
    echo '    '"${self@Q}"' "$@"'
    echo '  fi'
    echo '}'

    rc=$rrpak_permanentenv_path/rc
    echo
    echo "[ -f ${rc@Q} ] && source ${rc@Q} || true"
    ;;

  update)
    [ "$#" != 0 ] && usage 1

    if ! [[ -e "$config_path" ]]; then
      echo >&2 "Create '$config_path' with: rrpak_permanentenv_packages=(foo bar)"
      exit 1
    fi
    if [[ "${#rrpak_permanentenv_packages[@]}" == 0 ]]; then
      echo >&2 "No packages set. Put this in '$config_path': rrpak_permanentenv_packages=(foo bar)"
      exit 1
    fi
    if [[ -e "$rrpak_permanentenv_path" ]]; then
      if [[ "$rrpak_permanentenv_backups" == "no" ]]; then
        rm -rf "$rrpak_permanentenv_path"
      else
        backuptemp=$(mktemp -d --tmpdir"${rrpak_permanentenv_backups:+=}$rrpak_permanentenv_backups" "rrpak-update-$EPOCHSECONDS.XXXXXXXXXX")
        mv "$rrpak_permanentenv_path" "$backuptemp/oldbackup"
      fi
    fi
    "$0" build "$rrpak_permanentenv_path" "${rrpak_permanentenv_packages[@]}"
    if (( rrpak_permanentenv_remind_after != 0 )); then
      code="if (( EPOCHSECONDS > $(( EPOCHSECONDS + rrpak_permanentenv_remind_after )) )); then"
      code+=$'\n  echo "It\'s been a long time since \'rrpak update\'. When you have time, run it again."'
      code+=$'\nfi'
      echo "$code" >> "$rrpak_permanentenv_path/rc"
    fi
    "$0" clean
    ;;

  build)
    [ "$#" == 0 ] && usage 1
    destination=$(readlink -fv "$1")
    shift
    packages=("$@")
    normalize_packages
    do_build
    ;;

  run)
    localargs=()
    while [ "${1:-}" != "--" ]; do
      if [ "$#" == 0 ]; then
        echo >&2 "Error: Missing '--' argument to rrpak run"
        usage 1
      fi
      localargs+=("$1")
      shift
    done
    shift
    if [ "${1:-}" == "" ]; then
      echo >&2 "Error: Missing program name after the '--' argument to rrpak run"
      usage 1
    fi
    if [[ "${1:-}" == -* ]]; then
      # Could be interpreted as an option for `exec` or `flock`.
      echo >&2 "Error: The argument after '--' does not look like a program name"
      usage 1
    fi
    unset runlock_path
    code=$(RRPAK_IN_RUN=t "$0" internal-local "${localargs[@]}")
    eval "$code"
    exec flock -s "$runlock_path" "$@"
    ;;

  local)
    echo >&2 "Misconfiguration: 'rrpak local' should be handled by the rrpak shell function"
    exit 1
    ;;

  internal-local)
    exec 9>&1
    exec >&2
    opt=
    if [ "${1:-}" == "--old" ] || [ "${1:-}" == "--new" ]; then
      opt=$1
      shift
    fi
    packages=("$@")
    normalize_packages

    if [ "$opt" != "--old" ]; then
      "$0" clean --nonblock
    fi
    mkdir -p "$rrpak_local_cache_path"
    flock -s "$rrpak_local_cache_path" "$0" internal-local-locked "$opt" "${packages[@]}"
    ;;

  internal-local-locked)
    opt=$1
    shift
    packages=("$@")

    symlink=latest.$(printf '%s\n' "${packages[@]}" | sha256sum | cut -d' ' -f1).rrpak

    if [[ "$opt" == "--new" ]]; then
      destination=
    else
      oldversion=$(readlink -s "$rrpak_local_cache_path/$symlink" || true)
      destination="$rrpak_local_cache_path/$oldversion"
      created=$(stat -c %Y "$rrpak_local_cache_path/$oldversion/created" 2>/dev/null || true)
      if [[ "$opt" == "--old" ]]; then
        if [[ "$oldversion" == "" ]] || [[ "$created" == "" ]]; then
          echo >&2 "Error: This package list is not in the cache. Try again without --old."
          exit 1
        fi
      else
        if [[ "$created" == "" ]] || (( EPOCHSECONDS - created > rrpak_local_max_reuse_age )); then
          destination=
        fi
      fi
    fi

    if [[ "$destination" == "" ]]; then
      destination=$(mktemp -d -p "$rrpak_local_cache_path" env.XXXXXXXXXX.rrpak)

      echo >&2 "Installing ${packages[*]} to $destination..."
      do_build
      touch "$destination/created" "$destination/runlock"
      ln -sfT "${destination##*/}" "$rrpak_local_cache_path/$symlink"
      echo >&2 "Done."
    fi

    touch "$destination/used"
    rc="$destination/rc"
    runlock_path="$destination/runlock"
    if [[ -n "${RRPAK_IN_RUN:-}" ]]; then
      echo >&9 "runlock_path=${runlock_path@Q}"
    fi
    echo >&9 "source ${rc@Q}"
    ;;

  clean)
    force=
    flockargs=()
    for arg; do
      case "$arg" in
        --force) force=t;;
        --nonblock) flockargs=(-n -E0);;
        *) usage 1;;
      esac
    done
    # Lock it only if the cache exists and contains something.
    entries=("$rrpak_local_cache_path"/*.rrpak)
    if [[ "${#entries[@]}" != 0 ]]; then
      exec flock "${flockargs[@]}" "$rrpak_local_cache_path" "$0" internal-clean-locked "$force"
    fi
    ;;

  internal-clean-locked)
    force="$1"
    now=$EPOCHSECONDS
    for dir in "$rrpak_local_cache_path"/env.*.rrpak; do
      if [[ -n "$force" ]]; then
        rm -rf "$dir"
      elif [[ -e "$dir/used" ]] && (( now - $(stat -c %Y "$dir/used" 2>/dev/null || true) < rrpak_local_max_shell_life )); then
        true
      elif [[ -e "$dir/runlock" ]]; then
        flock -n -E0 "$dir/runlock" rm -rf "$dir"
      else
        rm -rf "$dir"
      fi
    done
    for sym in "$rrpak_local_cache_path"/latest.*.rrpak; do
      if [[ "$force" == "" ]] && [[ -e "$sym/used" ]]; then
        true
      else
        rm -f "$sym"
      fi
    done
    ;;

  help|--help)
    usage 0
    ;;

  *)
    echo >&2 "Unknown command '$cmd'"
    usage 1
    ;;
esac
